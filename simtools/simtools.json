{
  "ANNarchy": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model, Single-Compartment (Complex) Model",
    "features": "frontend, simulator",
    "interface_language": "Python, C++",
    "name": "ANNarchy",
    "operating_system": "Linux, MacOS",
    "processing_support": "Single Machine, GPU",
    "release": {
      "etag": "\"NAQT9BMUVTGYhcN8Oo74QQ\"",
      "published": "2025-03-17",
      "source": "pypi",
      "version": "4.8.2.5"
    },
    "summary": "<p>ANNarchy (Artificial Neural Networks architect) is a neural simulator designed for distributed rate-coded or spiking neural networks. The core of the library is written in C++ and distributed using openMP or CUDA. It provides an interface in Python for the definition of the networks.</p>",
    "urls": {
      "documentation": "https://annarchy.readthedocs.io",
      "download": "https://pypi.org/project/ANNarchy/",
      "examples": "https://annarchy.readthedocs.io/example/List.html",
      "forum": "https://groups.google.com/forum/#!forum/annarchy",
      "installation": "https://annarchy.readthedocs.io/Installation.html",
      "issue tracker": "https://github.com/ANNarchy/ANNarchy/issues",
      "source": "https://github.com/ANNarchy/ANNarchy"
    }
  },
  "Arbor": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "Python, C++",
    "name": "Arbor",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, Cluster, Supercomputer, GPU",
    "release": {
      "etag": "\"45wuhIBO2kaIMETHq+NSvA\"",
      "package_name": "arbor",
      "published": "2025-04-24",
      "source": "pypi",
      "version": "0.11.0"
    },
    "summary": "<p>Arbor is a high-performance library for computational neuroscience simulations with multi-compartment, morphologically-detailed cells, from single cell models to very large networks.\nArbor is written from the ground up with many-cpu and gpu architectures in mind, to help neuroscientists effectively use contemporary and future HPC systems to meet their simulation needs.</p>\n<p>Arbor supports NVIDIA and AMD GPUs as well as explicit vectorization on CPUs from Intel (AVX, AVX2 and AVX512) and ARM (Neon and SVE).\nWhen coupled with low memory overheads, this makes Arbor an order of magnitude faster than the most widely-used comparable simulation software.</p>\n<p>Arbor is open source and openly developed, and we use development practices such as unit testing, continuous integration, and validation.</p>",
    "urls": {
      "chat": "https://gitter.im/arbor-sim/community",
      "documentation": "https://docs.arbor-sim.org",
      "download": "https://pypi.org/project/arbor/",
      "email": "contact@arbor-sim.org",
      "examples": "https://github.com/arbor-sim/arbor/tree/master/python/example",
      "forum": "https://github.com/arbor-sim/arbor/discussions",
      "homepage": "https://arbor-sim.org",
      "installation": "https://docs.arbor-sim.org/en/stable/install",
      "issue tracker": "https://github.com/arbor-sim/arbor/issues",
      "source": "https://github.com/arbor-sim/arbor",
      "tutorial": "https://docs.arbor-sim.org/en/stable/tutorial"
    }
  },
  "Arbor GUI": {
    "features": "frontend",
    "interface_language": "GUI",
    "name": "Arbor GUI",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "GUI for",
        "name": "Arbor"
      }
    ],
    "release": {
      "etag": "W/\"bcc0dfc82ae4ca520b9e3b1fb23acb32a9fd68685ebcadd5362e1371855795d3\"",
      "published": "2025-04-28",
      "repository": "arbor-sim/gui",
      "source": "github",
      "version": "0.11.2"
    },
    "summary": "<p>Arbor GUI is a comprehensive tool for building single cell models using Arbor.\nIt strives to be self-contained, fast, and easy to use.</p>\n<ul>\n<li>Design morphologically detailled cells for simulation in Arbor.</li>\n<li>Load morphologies from SWC .swc, NeuroML .nml, NeuroLucida .asc.</li>\n<li>Define and highlight Arbor regions and locsets.</li>\n<li>Paint ion dynamics and bio-physical properties onto morphologies.</li>\n<li>Place spike detectors and probes.</li>\n<li>Export cable cells to Arbor\u2019s internal format (ACC) for direct simulation.</li>\n<li>Import cable cells in ACC format</li>\n</ul>",
    "urls": {
      "chat": "https://gitter.im/arbor-sim/gui",
      "download": "https://github.com/arbor-sim/gui/releases/",
      "email": "contact@arbor-sim.org",
      "forum": "https://github.com/arbor-sim/arbor/discussions",
      "homepage": "https://github.com/arbor-sim/gui",
      "installation": "https://docs.arbor-sim.org/en/latest/install/gui.html",
      "issue tracker": "https://github.com/arbor-sim/gui/issues",
      "source": "https://github.com/arbor-sim/gui",
      "tutorial": "https://docs.arbor-sim.org/en/latest/tutorial/single_cell_gui.html"
    }
  },
  "Arbor Playground": {
    "features": "frontend",
    "interface_language": "GUI, Python",
    "name": "Arbor Playground",
    "operating_system": "Linux, MacOS, Windows",
    "summary": "<p>Arbor Playground is an Emscripten + Pyodide port of Arbor and is meant to be a simple showcase of neural modelling in Arbor.</p>",
    "urls": {
      "chat": "https://gitter.im/arbor-sim/community",
      "documentation": "https://docs.arbor-sim.org",
      "email": "contact@arbor-sim.org",
      "forum": "https://github.com/arbor-sim/arbor/discussions",
      "homepage": "https://arbor-sim.org/playground",
      "issue tracker": "https://github.com/arbor-sim/playground/issues",
      "source": "https://github.com/arbor-sim/playground"
    }
  },
  "BMTK": {
    "features": "frontend",
    "interface_language": "Python",
    "name": "Brain Modelling Toolkit (BMTK)",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "exports to",
        "name": "SONATA"
      }
    ],
    "release": {
      "etag": "\"SL9I8iPucYjks8mds71NIw\"",
      "package_name": "bmtk",
      "published": "2025-03-26",
      "source": "pypi",
      "version": "1.1.2"
    },
    "summary": "<p>The Brain Modeling Toolkit (BMTK) is a python-based software package for building, simulating and analyzing large-scale neural network models.\nIt supports the building and simulation of models of varying levels-of-resolution; from multi-compartment biophysically detailed networks, to point-neuron models, to filter-based models, and even population-level firing rate models.</p>\n<p>The BMTK is not itself a simulator and will utilize existing simulators, like NEURON and NEST, to run different types of models.\nWhat BMTK does provide:</p>\n<ul>\n<li>A unified interface across different simulators, so that modelers can work with and study their own network models across different simulators without having to learn how to use each tool.</li>\n<li>An easy way to setup and initialize network simulations with little-to-no programming necessary</li>\n<li>Automatic integration of parallelization when running on HPC.</li>\n<li>Extra built-in features which the native simulators may not support out-of-the-box.</li>\n</ul>\n<p>The BMTK was developed and is supported at the Allen Institute for Brain Science and released under a BSD 3-clause license.\nWe encourage others to use the BMTK for their own research, and suggestions and contributions to the BMTK are welcome.</p>",
    "urls": {
      "homepage": "https://alleninstitute.github.io/bmtk/"
    }
  },
  "BluePyOpt": {
    "features": "tool",
    "interface_language": "Python",
    "name": "BluePyOpt",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "exports to",
        "name": "NeuroML"
      }
    ],
    "release": {
      "etag": "\"sBhMXq1khgfzO3Ydmh+Mxw\"",
      "package_name": "bluepyopt",
      "published": "2025-01-28",
      "source": "pypi",
      "version": "1.14.18"
    },
    "summary": "<p>The Blue Brain Python Optimisation Library (BluePyOpt) is an extensible framework for data-driven model parameter optimisation that wraps and standardises several existing open-source tools.</p>\n<p>It simplifies the task of creating and sharing these optimisations, and the associated techniques and knowledge.\nThis is achieved by abstracting the optimisation and evaluation tasks into various reusable and flexible discrete elements according to established best-practices.</p>\n<p>Further, BluePyOpt provides methods for setting up both small- and large-scale optimisations on a variety of platforms, ranging from laptops to Linux clusters and cloud-based compute infrastructures.</p>",
    "urls": {
      "homepage": "https://bluepyopt.readthedocs.io"
    }
  },
  "Brain Scaffold Builder": {
    "features": "frontend",
    "interface_language": "Python",
    "name": "Brain Scaffold Builder",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "simulates with",
        "name": "Neuron"
      },
      {
        "description": "simulates with",
        "name": "NEST"
      },
      {
        "description": "simulates with",
        "name": "Arbor"
      }
    ],
    "release": {
      "etag": "\"Aijm/NHhmIVnBaTEKLz/QQ\"",
      "package_name": "bsb",
      "published": "2025-06-11",
      "source": "pypi",
      "version": "6.0.0"
    },
    "summary": "<p>The Brain Scaffold Builder (BSB) is a black box component framework for multiparadigm neural modelling: we provide structure, architecture and organization, and you provide the use-case specific parts of your model.\nIn our framework, your model is described in a code-free configuration of components with parameters.</p>\n<p>For the framework to reliably use components, and make them work together in a complex workflow, it asks a fixed set of questions per component type: e.g. a connection component will be asked how to connect cells.\nThese contracts of cooperation between you and the framework are called interfaces. The framework executes a transparently parallelized workflow, and calls your components to fulfill their role.</p>\n<p>This way, by implementing our component interfaces and declaring them in a configuration file, most models end up being code-free, well-parametrized, self-contained, human-readable, multi-scale models!</p>",
    "urls": {
      "homepage": "https://bsb.readthedocs.io"
    }
  },
  "Brain dynamics toolbox": {
    "biological_level": "Population Model",
    "features": "frontend, simulator",
    "interface_language": "MATLAB",
    "name": "Brain dynamics toolbox",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine",
    "summary": "<p>The Brain Dynamics Toolbox is open-source Matlab software for simulating bespoke dynamical systems in neuroscience and beyond.\nUsers define their system of equations as a custom matlab function.\nInterchangeable solvers and plotting tools can then be applied to that system with no additional programming effort.</p>",
    "urls": {
      "homepage": "http://bdtoolbox.org/"
    }
  },
  "BrainPy": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model, Single-Compartment (Complex) Model",
    "features": "frontend, simulator",
    "interface_language": "Python",
    "name": "BrainPy",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, GPU",
    "release": {
      "etag": "\"z1FiQsByaNdK8F11O+0VqQ\"",
      "package_name": "brainpy",
      "published": "2025-05-31",
      "source": "pypi",
      "version": "2.6.1"
    },
    "summary": "<p>BrainPy is a flexible, efficient, and extensible framework for computational neuroscience and brain-inspired computation based on the Just-In-Time (JIT) compilation (built on top of JAX, Taichi, Numba, and others). It provides an integrative ecosystem for brain dynamics programming, including brain dynamics building, simulation, training, analysis, etc.</p>",
    "urls": {
      "documentation": "https://brainpy.readthedocs.io",
      "examples": "https://github.com/brainpy/examples",
      "installation": "https://brainpy.readthedocs.io/en/latest/quickstart/installation.html",
      "issue tracker": "https://github.com/brainpy/BrainPy/issues",
      "source": "https://github.com/brainpy/BrainPy",
      "tutorial": "https://brainpy.readthedocs.io/en/latest/core_concepts.html"
    }
  },
  "Brian": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "Python",
    "name": "Brian",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, Cluster",
    "release": {
      "etag": "\"ArC5PmppiMTJkSZ+c9ZPgw\"",
      "package_name": "Brian2",
      "published": "2025-05-14",
      "source": "pypi",
      "version": "2.9.0"
    },
    "summary": "<p>Brian is a free, open source simulator for spiking neural networks. It is written in the Python programming language and is available on almost all platforms. We believe that a simulator should not only save the time of processors, but also the time of scientists. Brian is therefore designed to be easy to learn and use, highly flexible and easily extensible. </p>",
    "urls": {
      "chat": "https://gitter.im/brian-team/brian2",
      "documentation": "https://brian2.readthedocs.io/",
      "download": "https://pypi.org/project/Brian2/",
      "examples": "https://brian2.readthedocs.io/en/stable/examples/index.html",
      "forum": "https://brian.discourse.group",
      "homepage": "https://briansimulator.org/",
      "installation": "https://brian2.readthedocs.io/en/stable/introduction/install.html",
      "issue tracker": "https://github.com/brian-team/brian2/issues",
      "source": "https://github.com/brian-team/brian2",
      "tutorial": "https://brian2.readthedocs.io/en/stable/resources/tutorials/index.html"
    }
  },
  "Brian2CUDA": {
    "features": "library",
    "interface_language": "Python",
    "name": "Brian2CUDA",
    "operating_system": "Linux, MacOS",
    "processing_support": "GPU",
    "relations": [
      {
        "description": "simulates",
        "name": "Brian"
      }
    ],
    "release": {
      "package_name": "Brian2Cuda",
      "source": "pypi"
    },
    "summary": "<p>Brian2CUDA is a Python package for simulating spiking neural networks on graphics processing units (GPUs).\nIt is an extension of the spiking neural network simulator Brian2, which allows flexible model definitions in\nPython. Brian2CUDA uses the code generation system from Brian2 to generate simulation code in C++/CUDA, which is\nthen executed on NVIDIA GPUs.</p>",
    "urls": {
      "documentation": "https://brian2cuda.readthedocs.io",
      "download": "https://pypi.org/project/Brian2CUDA/",
      "installation": "https://brian2cuda.readthedocs.io/en/latest/introduction/install.html",
      "issue tracker": "https://github.com/brian-team/brian2cuda/issues",
      "source": "https://github.com/brian-team/brian2cuda"
    }
  },
  "Brian2GeNN": {
    "features": "library",
    "interface_language": "Python",
    "name": "Brian2GeNN",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "converts from",
        "name": "Brian"
      },
      {
        "description": "exports to",
        "name": "GeNN"
      }
    ],
    "release": {
      "etag": "\"w+LfWwRFgsg3qxWBiZtL0g\"",
      "published": "2023-07-28",
      "source": "pypi",
      "version": "1.7.0"
    },
    "summary": "<p>Brian2GeNN connects Brian 2 to the GeNN simulator, so that users can make use of GeNN GPU acceleration when\ndeveloping their models in Brian, without requiring any technical knowledge about GPUs, C++ or GeNN.</p>",
    "urls": {
      "documentation": "https://brian2genn.readthedocs.io",
      "download": "https://pypi.org/project/Brian2GeNN/",
      "installation": "https://brian2genn.readthedocs.io/en/stable/introduction/index.html#installing-the-brian2genn-interface",
      "issue tracker": "https://github.com/brian-team/brian2genn/issues",
      "source": "https://github.com/brian-team/brian2genn"
    }
  },
  "CARLsim": {
    "biological_level": "Single-Compartment (Simple) Model",
    "features": "frontend, simulator",
    "interface_language": "C++",
    "name": "CARLsim",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, GPU",
    "release": {
      "etag": "W/\"c8901ad3a07b4f6380a3b9e820c83c324213fba846f4dbc277fe5c655b7858e5\"",
      "published": "2023-07-13",
      "repository": "UCI-CARL/CARLsim6",
      "source": "github",
      "version": "6.1"
    },
    "summary": "<p>CARLsim is an efficient, easy-to-use, GPU-accelerated library for simulating large-scale spiking neural network (SNN) models with a high degree of biological detail. CARLsim allows execution of networks of Izhikevich spiking neurons with realistic synaptic dynamics on both generic x86 CPUs and standard off-the-shelf GPUs. The simulator provides a PyNN-like programming interface (C/C++), which allows for details and parameters to be specified at the synapse, neuron, and network level.</p>",
    "urls": {
      "documentation": "https://uci-carl.github.io/CARLsim6/index.html",
      "homepage": "http://www.socsci.uci.edu/~jkrichma/CARLsim/index.html",
      "installation": "https://uci-carl.github.io/CARLsim6/ch1_getting_started.html",
      "issue tracker": "https://github.com/UCI-CARL/CARLsim6/issues",
      "source": "https://github.com/UCI-CARL/CARLsim6",
      "tutorial": "https://uci-carl.github.io/CARLsim6/usergroup1.html"
    }
  },
  "DiPDE": {
    "biological_level": "Population Model",
    "features": "frontend, simulator",
    "interface_language": "Python",
    "name": "DiPDE",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine",
    "summary": "<p>DiPDE (dipde) is a simulation platform for numerically solving the time evolution of coupled networks of neuronal populations.\nInstead of solving the subthreshold dynamics of individual model leaky-integrate-and-fire (LIF) neurons, dipde models the voltage distribution of a population of neurons with a single population density equation.\nIn this way, dipde can facilitate the fast exploration of mesoscale (population-level) network topologies, where large populations of neurons are treated as homogeneous with random fine-scale connectivity.</p>",
    "urls": {
      "homepage": "https://alleninstitute.github.io/dipde/index.html"
    }
  },
  "EDEN": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "simulator",
    "interface_language": "CLI, Python",
    "name": "EDEN",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, Cluster",
    "release": {
      "etag": "\"tduph2t6s3J13/y154WNYg\"",
      "package_name": "eden-simulator",
      "published": "2023-11-28",
      "source": "pypi",
      "version": "0.2.3"
    },
    "summary": "<p>Extensible Dynamics Engine for Networks (EDEN) is a high-performance NeuroML-based neural simulator.</p>",
    "urls": {
      "download": "https://pypi.org/project/eden-simulator/",
      "examples": "https://github.com/spanag/eden-sim-jupyter-demo",
      "installation": "https://gitlab.com/c7859/neurocomputing-lab/Inferior_OliveEMC/eden/-/tree/main#installing",
      "issue tracker": "https://gitlab.com/c7859/neurocomputing-lab/Inferior_OliveEMC/eden/-/issues",
      "source": "https://gitlab.com/c7859/neurocomputing-lab/Inferior_OliveEMC/eden"
    }
  },
  "GENESIS": {
    "biological_level": "Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "GUI, C",
    "name": "GEneral NEural SImulation System (GENESIS)",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine",
    "summary": "<p>GENESIS (the GEneral NEural SImulation System) is a general purpose simululation platform that was developed to support the simulation of neural systems ranging from subcellular components and biochemical reactions to complex models of single neurons, simulations of large networks, and system-level models.</p>",
    "urls": {
      "homepage": "http://www.genesis-sim.org/"
    }
  },
  "GeNN": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model, Single-Compartment (Complex) Model",
    "features": "frontend, simulator",
    "interface_language": "Python, C++",
    "name": "GeNN",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, GPU",
    "release": {
      "etag": "W/\"c737148de6f24135e1f345a538ee3a93314bb3722ccbdb76366c8627dfc4c530\"",
      "published": "2025-04-25",
      "repository": "genn-team/genn",
      "source": "github",
      "version": "5.2.0"
    },
    "summary": "<p>GeNN is a GPU enhanced Neuronal Network simulation environment based on NVIDIA CUDA technology.</p>",
    "urls": {
      "documentation": "https://genn-team.github.io/genn/documentation/4/html/index.html",
      "forum": "https://github.com/orgs/genn-team/discussions/categories/genn-questions",
      "homepage": "https://genn-team.github.io",
      "issue tracker": "https://github.com/genn-team/genn/issues",
      "source": "https://github.com/genn-team/genn",
      "tutorial": "https://genn-team.github.io/tutorials.html"
    }
  },
  "Geppeto": {
    "features": "frontend",
    "interface_language": "Python, Javascript",
    "name": "Geppeto",
    "operating_system": "Linux, MacOS, Windows",
    "summary": "<p>Geppetto is a web-based visualisation and simulation platform to build neuroscience software applications.\nReuse best practices, best compomnents, best design.\nDon't reinvent the wheel.</p>",
    "urls": {
      "homepage": "https://www.geppetto.org/"
    }
  },
  "Jaxley": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "Python",
    "name": "Jaxley",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, GPU, TPU",
    "release": {
      "etag": "\"qIndOY2fjaBD1QjmrN0LTQ\"",
      "package_name": "jaxley",
      "published": "2025-07-04",
      "source": "pypi",
      "version": "0.11.0"
    },
    "summary": "<p>Jaxley is a differentiable simulator for biophysical neuron models, written in the Python library JAX. Its key features are:</p>\n<ul>\n<li>automatic differentiation, allowing gradient-based optimization of thousands of parameters</li>\n<li>support for CPU, GPU, or TPU without any changes to the code</li>\n<li>jit-compilation, making it as fast as other packages while being fully written in Python</li>\n<li>support for multicompartment neurons</li>\n<li>elegant mechanisms for parameter sharing</li>\n</ul>",
    "urls": {
      "documentation": "https://jaxley.readthedocs.io",
      "installation": "https://jaxley.readthedocs.io/en/latest/installation.html",
      "issue tracker": "https://github.com/jaxleyverse/jaxley/issues",
      "source": "https://github.com/jaxleyverse/jaxley",
      "tutorial": "https://jaxley.readthedocs.io/en/latest/tutorials.html"
    }
  },
  "LFPy": {
    "features": "tool",
    "interface_language": "Python",
    "name": "LFPy",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "simulates with",
        "name": "Neuron"
      }
    ],
    "release": {
      "etag": "\"9AKr15ykUmxN1JenPbsPEg\"",
      "published": "2025-01-22",
      "source": "pypi",
      "version": "2.3.5"
    },
    "summary": "<p>LFPy is a Python module for calculation of extracellular potentials from multicompartment neuron models.\nIt relies on the NEURON simulator and uses the Python interface it provides.</p>",
    "urls": {
      "documentation": "https://lfpy.readthedocs.io/en/latest/",
      "download": "https://pypi.org/project/LFPy/",
      "homepage": "https://lfpy.readthedocs.io/en/latest/",
      "source": "https://github.com/LFPy/LFPy/"
    }
  },
  "MOOSE": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "Python, GUI, C++",
    "name": "MOOSE",
    "operating_system": "Linux, MacOS",
    "processing_support": "Single Machine, Cluster, Supercomputer, GPU",
    "relations": [
      {
        "description": "can import, can export to",
        "name": "NeuroML"
      }
    ],
    "release": {
      "etag": "\"w8U0E92U6NIS3K+z1yU/kw\"",
      "package_name": "pymoose",
      "published": "2025-07-03",
      "source": "pypi",
      "version": "4.1.2"
    },
    "summary": "<p>MOOSE is the Multiscale Object-Oriented Simulation Environment.\nIt is designed to simulate neural systems ranging from subcellular components and biochemical reactions to complex models of single neurons, circuits, and large networks.\nMOOSE can operate at many levels of detail, from stochastic chemical computations, to multicompartment single-neuron models, to spiking neuron network models.</p>\n<p>MOOSE is a simulation environment, not just a numerical engine.\nIt provides the essentials by way of object-oriented representations of model concepts and fast numerical solvers, but its scope is much broader.\nIt has a scripting interface with Python, graphical displays with Matplotlib, PyQt, and OpenGL, and support for many model formats.</p>",
    "urls": {
      "documentation": "https://moose.ncbs.res.in/readthedocs/index.html",
      "homepage": "https://moose.ncbs.res.in/",
      "source": "https://github.com/BhallaLab/moose"
    }
  },
  "MUSIC": {
    "features": "API",
    "interface_language": "C++",
    "name": "MUSIC (MUlti-SImulation Coordinator)",
    "operating_system": "Linux, MacOS",
    "relations": [
      {
        "description": "is used by",
        "name": "NEST"
      }
    ],
    "release": {
      "etag": "W/\"96198c6815c0e87364acac87e6d6d049aea57d444bf7951154d62886362baa7e\"",
      "published": "2023-04-03",
      "repository": "INCF/MUSIC",
      "source": "github",
      "version": "1.2.1"
    },
    "summary": "<p>MUSIC is an API allowing large scale neuron simulators using MPI internally to exchange data during runtime.\nMUSIC provides mechanisms to transfer massive amounts of event information and continuous values from one parallel application to another.\nSpecial care has been taken to ensure that existing simulators can be adapted to MUSIC.\nIn particular, MUSIC handles data transfer between applications that use different time steps and different data allocation strategies.</p>",
    "urls": {
      "homepage": "https://github.com/INCF/MUSIC",
      "source": "https://github.com/INCF/MUSIC"
    }
  },
  "NEST": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model,",
    "features": "frontend, simulator",
    "interface_language": "Python, CLI, C++",
    "name": "NEST",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, Cluster, Supercomputer",
    "relations": [
      {
        "description": "can import",
        "name": "SONATA"
      }
    ],
    "release": {
      "etag": "W/\"ca18070e05ee943fa2bc984ddc86de3bbe5cc7cdf0670deb2e75ba94c426bbe7\"",
      "published": "2024-08-02",
      "repository": "nest/nest-simulator",
      "source": "github",
      "version": "3.8"
    },
    "summary": "<p>NEST is a simulator for spiking neural network models that focuses on the dynamics, size and structure of neural systems rather than on the exact morphology of individual neurons.</p>",
    "urls": {
      "documentation": "https://nest-simulator.org/documentation",
      "examples": "https://nest-simulator.readthedocs.io/en/stable/examples/index.html#pynest-examples",
      "forum": "https://nest-simulator.readthedocs.io/en/stable/developer_space/guidelines/mailing_list_guidelines.html#mail-guidelines",
      "homepage": "https://nest-simulator.org",
      "installation": "https://nest-simulator.readthedocs.io/en/stable/installation/index.html",
      "issue tracker": "https://nest-simulator.readthedocs.io/en/stable/developer_space/index.html#contribute",
      "source": "https://github.com/nest/nest-simulator",
      "tutorial": "https://nest-simulator.readthedocs.io/en/stable/tutorials/index.html#tutorials"
    }
  },
  "NEST Desktop": {
    "features": "frontend",
    "interface_language": "GUI",
    "name": "NEST Desktop",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "is GUI for",
        "name": "NEST"
      }
    ],
    "release": {
      "etag": "\"sHgEEBT5wtEIjIG0pqts7A\"",
      "package_name": "nest-desktop",
      "published": "2025-05-09",
      "source": "pypi",
      "version": "4.1.0"
    },
    "summary": "<p>NEST Desktop is a web-based GUI application for NEST Simulator, an advanced simulation tool for computational neuroscience.\nNEST Desktop enables to construct a neuronal network model graphically and to perform a simulation experiment.\nThus, no programming skills are required.</p>",
    "urls": {
      "documentation": "https://nest-desktop.readthedocs.io",
      "homepage": "https://nest-desktop.readthedocs.io",
      "source": "https://github.com/nest-desktop/nest-desktop"
    }
  },
  "NEST GPU": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model",
    "features": "frontend, simulator",
    "interface_language": "Python, C++, C",
    "name": "NEST GPU",
    "operating_system": "Linux",
    "processing_support": "GPU",
    "relations": [
      {
        "description": "has similar interface to",
        "name": "NEST"
      }
    ],
    "summary": "<p>NEST GPU is a GPU-MPI library for simulation of large-scale networks of spiking neurons.\nWith this library it is possible to run relatively fast simulations of large-scale networks of spiking neurons employing GPUs. For instance, on a single NVIDIA GeForce RTX 2080 Ti GPU board it is possible to simulate the activity of 1 million multisynapse AdEx neurons with 1000 synapse per neuron in little more than 70 seconds per second of neural activity using the fifth-order Runge-Kutta method with adaptive stepsize as differential equations solver. The MPI communication is also very efficient. The Python interface is very similar to that of the NEST simulator: the most used commands are practically identical, dictionaries are used to define neurons, connections and synapsis properties in the same way.</p>",
    "urls": {
      "documentation": "https://nest-gpu.readthedocs.io",
      "examples": "https://nest-gpu.readthedocs.io/en/latest/examples/index.html",
      "homepage": "https://nest-gpu.readthedocs.io",
      "installation": "https://nest-gpu.readthedocs.io/en/latest/installation/index.html",
      "issue tracker": "https://github.com/nest/nest-gpu/issues",
      "source": "https://github.com/nest/nest-gpu"
    }
  },
  "NESTML": {
    "features": "standard",
    "interface_language": "Python",
    "name": "NESTML",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "simulates with",
        "name": "NEST"
      }
    ],
    "release": {
      "etag": "\"aCdH6mr34i9QWp39n5ZtSw\"",
      "package_name": "nestml",
      "published": "2025-06-30",
      "source": "pypi",
      "version": "8.0.2"
    },
    "summary": "<p>NESTML is a domain-specific language for neuron and synapse models. These dynamical models can be used in simulations of brain activity on several platforms, in particular the NEST Simulator. NESTML combines an easy to understand, yet powerful syntax; a flexible processing toolchain, written in Python; and good simulation performance by means of code generation (C++ for NEST Simulator).</p>",
    "urls": {
      "documentation": "https://nestml.readthedocs.io/",
      "examples": "https://github.com/nest/nestml/tree/master/models",
      "forum": "https://nest-simulator.readthedocs.io/en/stable/developer_space/guidelines/mailing_list_guidelines.html#mail-guidelines",
      "homepage": "https://nestml.readthedocs.org/",
      "installation": "https://nestml.readthedocs.io/en/latest/installation.html",
      "issue tracker": "https://github.com/nest/nestml/issues",
      "source": "https://github.com/nest/nestml/",
      "tutorial": "https://nestml.readthedocs.io/en/latest/tutorials/index.html"
    }
  },
  "Nengo": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model",
    "features": "frontend, simulator",
    "interface_language": "Python",
    "name": "Nengo",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine",
    "release": {
      "etag": "\"cO7x9A8FiyW6hi6kclseAg\"",
      "package_name": "nengo",
      "published": "2025-05-29",
      "source": "pypi",
      "version": "4.1.0"
    },
    "summary": "<p>Nengo is a Python library for building and simulating large-scale neural models. Nengo can create sophisticated spiking and non-spiking neural simulations with sensible defaults in a few lines of code. Yet, Nengo is highly extensible and flexible. You can define your own neuron types and learning rules, get input directly from hardware, build and run deep neural networks, drive robots, and even simulate your model on a completely different neural simulator or neuromorphic hardware.</p>",
    "urls": {
      "documentation": "https://www.nengo.ai/documentation/",
      "examples": "https://www.nengo.ai/examples/",
      "forum": "https://forum.nengo.ai/",
      "homepage": "https://www.nengo.ai",
      "installation": "https://www.nengo.ai/nengo/getting-started.html#installation",
      "issue tracker": "https://github.com/nengo/nengo/issues",
      "source": "https://github.com/nengo/nengo",
      "tutorial": "https://www.nengo.ai/nengo/examples.html#introductory-tutorials"
    }
  },
  "NengoGUI": {
    "features": "frontend",
    "interface_language": "GUI",
    "name": "NengoGUI",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "is GUI for",
        "name": "Nengo"
      }
    ],
    "release": {
      "etag": "\"FpuvXv4pM5mDhHoAqQ+lqA\"",
      "package_name": "nengo-gui",
      "published": "2025-05-29",
      "source": "pypi",
      "version": "0.6.0"
    },
    "summary": "<p>Nengo GUI is an HTML5-based interactive visualizer for large-scale neural models created with Nengo. The GUI lets you see the structure of a Nengo model, plots spiking activity and decoded representations, and enables you to alter inputs in real time while the model is running.</p>",
    "urls": {
      "source": "https://github.com/nengo/nengo-gui"
    }
  },
  "NengoMPI": {
    "features": "library",
    "interface_language": "Python",
    "name": "NengoMPI",
    "operating_system": "Linux",
    "processing_support": "Single Machine, Cluster",
    "relations": [
      {
        "description": "simulates",
        "name": "Nengo"
      }
    ],
    "summary": "<p>nengo_mpi is a C++/MPI backend for nengo, a python library for building and simulating biologically realistic neural networks. nengo_mpi makes it possible to run nengo simulations in parallel on thousands of processors, and existing nengo scripts can be adapted to make use of nengo_mpi with minimal effort.</p>",
    "urls": {
      "documentation": "https://nengo-mpi.readthedocs.org/",
      "source": "https://github.com/nengo/nengo-gui"
    }
  },
  "NengoOCL": {
    "features": "library",
    "interface_language": "Python",
    "name": "NengoOCL",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "GPU",
    "relations": [
      {
        "description": "simulates",
        "name": "Nengo"
      }
    ],
    "release": {
      "etag": "\"vu6cJruHJPXg3WsHvnHv4g\"",
      "package_name": "nengo-ocl",
      "published": "2023-11-16",
      "source": "pypi",
      "version": "3.0.0"
    },
    "summary": "<p>NengoOCL is an OpenCL-based simulator for brain models built using Nengo. It can be orders of magnitude faster than the reference simulator in nengo for large models.</p>",
    "urls": {
      "documentation": "https://www.nengo.ai/nengo-ocl",
      "source": "https://github.com/nengo/nengo-ocl"
    }
  },
  "NetPyNE": {
    "features": "frontend",
    "interface_language": "Python, GUI",
    "model_description_language": "NeuroML/LEMS",
    "name": "NetPyNE",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "simulates with",
        "name": "Neuron"
      },
      {
        "description": "imports from",
        "name": "NeuroML"
      }
    ],
    "release": {
      "etag": "\"oRuzop5Du7ormyma9PsdVA\"",
      "package_name": "netpyne",
      "published": "2025-07-09",
      "source": "pypi",
      "version": "1.1.0"
    },
    "summary": "<p>NetPyNE is an open-source Python package to facilitate the development, parallel simulation, analysis, and optimization of biological neuronal networks using the NEURON simulator.</p>",
    "urls": {
      "documentation": "http://doc.netpyne.org/user_documentation.html",
      "homepage": "http://www.netpyne.org/",
      "installation": "https://www.netpyne.org/documentation/installation",
      "issue tracker": "https://github.com/suny-downstate-medical-center/netpyne/issues",
      "source": "https://github.com/suny-downstate-medical-center/netpyne",
      "tutorial": "http://doc.netpyne.org/tutorial.html"
    }
  },
  "NeuroML": {
    "features": "standard",
    "interface_language": "Python, XML, GUI",
    "model_description_language": "NeuroML/LEMS",
    "name": "NeuroML",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "exports to, imports from, can be imported by",
        "name": "Neuron"
      },
      {
        "description": "exports to, can be imported by",
        "name": "NetPyNE"
      },
      {
        "description": "is used by",
        "name": "c302"
      },
      {
        "description": "can be simulated by",
        "name": "EDEN"
      },
      {
        "description": "exports to",
        "name": "Brian"
      },
      {
        "description": "interoperates with",
        "name": "PyNN"
      },
      {
        "description": "exports to, imports from, can be imported by",
        "name": "Arbor"
      }
    ],
    "summary": "<p>NeuroML is an international, collaborative initiative to develop a language for describing detailed models of neural systems, which will serve as a standard data format for defining and exchanging descriptions of neuronal cell and network models. NeuroML is:</p>\n<ul>\n<li>modular</li>\n<li>standardised</li>\n<li>structured</li>\n</ul>\n<p>and this allows you to:</p>\n<ul>\n<li>easily build and optimise detailed models of neural systems</li>\n<li>easily validate your models</li>\n<li>easily visualise your models</li>\n<li>easily simulate your models using a variety of simulators</li>\n<li>easily analyse your simulations</li>\n</ul>\n<p>all using a well supported set of tools in the powerful Python programming language.</p>",
    "urls": {
      "documentation": "https://docs.neuroml.org",
      "download": "https://docs.neuroml.org/Userdocs/Software/Software.html",
      "homepage": "https://neuroml.org",
      "source": "https://github.com/NeuroML",
      "tutorial": "https://docs.neuroml.org/Userdocs/GettingStarted.html"
    }
  },
  "NeuroRD": {
    "biological_level": "Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "Java, CLI",
    "name": "NeuroRD",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine",
    "summary": "<p>NeuroRD is a computationally efficient, stochastic reaction-diffusion simulator (pronounced NeurRDS) used mostly for simulating neuronal signaling pathways.\nThis is a Java program which runs on any platform.\nThe algorithm is based on Gillespie's tau-leap reaction algorithm, and the stochastic diffusion algorithm of Blackwell.\nIt uses XML-based model specifications.</p>",
    "urls": {
      "homepage": "https://krasnow1.gmu.edu/CENlab/software.html"
    }
  },
  "Neuron": {
    "biological_level": "Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "Python, HOC, C, C++",
    "model_description_language": "NMODL, HOC",
    "name": "Neuron",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, Cluster, Supercomputer",
    "relations": [
      {
        "description": "is used by, exports to",
        "name": "NeuroML"
      },
      {
        "description": "is used by",
        "name": "NetPyNE"
      },
      {
        "description": "is used by",
        "name": "LFPy"
      }
    ],
    "release": {
      "etag": "\"W2099VeBwspmaGu4lr7cGQ\"",
      "package_name": "neuron",
      "published": "2025-05-22",
      "source": "pypi",
      "version": "8.2.7"
    },
    "summary": "<p>NEURON is a simulator for neurons and networks of neurons that runs efficiently on your local machine, in the cloud, or on an HPC.\nBuild and simulate models using Python, HOC, and/or NEURON's graphical interface.</p>",
    "urls": {
      "documentation": "http://nrn.readthedocs.io/",
      "download": "https://nrn.readthedocs.io/en/8.2.2/#installation",
      "forum": "https://www.neuron.yale.edu/phpBB/",
      "homepage": "https://neuron.yale.edu/neuron/",
      "installation": "https://nrn.readthedocs.io/en/latest/install/install.html",
      "source": "https://github.com/neuronsimulator/nrn"
    }
  },
  "NeuronC": {
    "biological_level": "Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "C",
    "model_description_language": "NeuronC Language",
    "name": "NeuronC",
    "operating_system": "Linux, MacOS",
    "processing_support": "Single Machine",
    "summary": "<p>A neural circuit simulation language that allows a user to construct a realistic biophysically-based model of a neural circuit (1 to 10,000 neurons) and simulate a physiology experiment on it.</p>",
    "urls": {
      "homepage": "http://retina.anatomy.upenn.edu/~rob/neuronc.html"
    }
  },
  "PyNN": {
    "features": "frontend, standard",
    "interface_language": "Python",
    "model_description_language": "PyNN",
    "name": "PyNN",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "simulates with",
        "name": "Neuron"
      },
      {
        "description": "simulates with",
        "name": "NEST"
      },
      {
        "description": "simulates with",
        "name": "Brian"
      },
      {
        "description": "interoperates with",
        "name": "NeuroML"
      }
    ],
    "release": {
      "etag": "\"wKAOjKmABBakbLy1H0JCQw\"",
      "package_name": "PyNN",
      "published": "2025-04-02",
      "source": "pypi",
      "version": "0.12.4"
    },
    "summary": "<p>PyNN (pronounced 'pine') is a simulator-independent language for building neuronal network models.</p>\n<p>In other words, you can write the code for a model once, using the PyNN API and the Python programming language, and then run it without modification on any simulator that PyNN supports (currently NEURON, NEST and Brian 2) and on a number of neuromorphic hardware systems.</p>\n<p>The PyNN API aims to support modelling at a high-level of abstraction (populations of neurons, layers, columns and the connections between them) while still allowing access to the details of individual neurons and synapses when required.\nPyNN provides a library of standard neuron, synapse and synaptic plasticity models, which have been verified to work the same on the different supported simulators.\nPyNN also provides a set of commonly-used connectivity algorithms (e.g. all-to-all, random, distance-dependent, small-world) but makes it easy to provide your own connectivity in a simulator-independent way.</p>\n<p>Even if you don't wish to run simulations on multiple simulators, you may benefit from writing your simulation code using PyNN's powerful, high-level interface.\nIn this case, you can use any neuron or synapse model supported by your simulator, and are not restricted to the standard models.</p>",
    "urls": {
      "documentation": "http://neuralensemble.org/docs/PyNN/",
      "examples": "http://neuralensemble.org/docs/PyNN/examples.html",
      "forum": "https://groups.google.com/forum/#!forum/neuralensemble",
      "homepage": "http://neuralensemble.org/PyNN/",
      "installation": "http://neuralensemble.org/docs/PyNN/installation.html",
      "issue tracker": "https://github.com/NeuralEnsemble/PyNN/issues",
      "source": "https://github.com/NeuralEnsemble/PyNN/"
    }
  },
  "PyNeuroML": {
    "features": "tool",
    "interface_language": "Python, GUI",
    "model_description_language": "NeuroML/LEMS",
    "name": "PyNeuroML",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "is Python package for",
        "name": "NeuroML"
      },
      {
        "description": "uses",
        "name": "libNeuroML"
      },
      {
        "description": "simulates with",
        "name": "Neuron"
      },
      {
        "description": "simulates with",
        "name": "NetPyNE"
      },
      {
        "description": "simulates with",
        "name": "EDEN"
      },
      {
        "description": "simulates with",
        "name": "Brian"
      }
    ],
    "release": {
      "etag": "\"DAGoRT+6gLDIbmotFu6okw\"",
      "package_name": "pyneuroml",
      "published": "2025-07-07",
      "source": "pypi",
      "version": "1.3.20"
    },
    "summary": "<p>A single package in Python unifying scripts and modules for reading, writing, simulating and analysing NeuroML2/LEMS models.</p>",
    "urls": {
      "documentation": "https://docs.neuroml.org",
      "download": "https://docs.neuroml.org/Userdocs/Software/pyNeuroML.html",
      "homepage": "https://neuroml.org",
      "source": "https://github.com/NeuroML/pyNeuroML",
      "tutorial": "https://docs.neuroml.org/Userdocs/GettingStarted.html"
    }
  },
  "ReMoto": {
    "biological_level": "Population Model",
    "features": "frontend, simulator",
    "interface_language": "Web",
    "name": "ReMoto",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine",
    "summary": "<p>ReMoto was originally developed as a web-based neuronal simulation system, intended for studying spinal cord neuronal networks responsible for muscle control.\nThe simulated networks are affected by descending drive, afferent drive, and electrical nerve stimulation.\nThe simulator may be used to investigate phenomena at several levels of organization, e.g., at the neuronal membrane level or at the whole muscle behavior level (e.g., muscle force generation).\nThis versatility arises because each element (neurons, synapses, muscle fibers) has its own specific mathematical model, usually involving the action of voltage- or neurotransmitter-dependent ionic channels.\nThe simulator should be helpful in activities such as interpretation of results obtained from neurophysiological experiments in humans or mammals, proposal of hypothesis or testing models or theories on neuronal dynamics or neuronal network processing, validation of experimental protocols, and teaching neurophysiology.</p>",
    "urls": {
      "homepage": "http://remoto.leb.usp.br",
      "tutorial": "http://remoto.leb.usp.br/remoto/Learning/learning.html"
    }
  },
  "SNNAP": {
    "biological_level": "Population Model, Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "Java, GUI",
    "name": "SNNAP",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine",
    "summary": "<p>Simulator for Neural Networks and Action Potentials (SNNAP) is a tool for rapid development and simulation of realistic models of single neurons and neural networks.\nIt includes mathematical descriptions of ion currents and intracellular second messengers and ions.\nIn addition, you can simulate current flow in multicompartment models of neurons by using the equations describing electric coupling.</p>\n<p>SNNAP also includes mathematical descriptions of intracellular second messengers and ions, and simulate the modulation of membrane currents and synaptic transmission, either enhancement or inhibition.\nOther advantages of SNNAP include:</p>\n<ul>\n<li>Written in JAVA and can run on virtually any type of computer system.</li>\n<li>Graphical user interface</li>\n<li>Ability to simulate common experimental manipulations.</li>\n<li>Modular organizations of input files.</li>\n</ul>",
    "urls": {
      "homepage": "https://med.uth.edu/nba/snnap/",
      "tutorial": "https://med.uth.edu/nba/snnap/snnap-tutorials/"
    }
  },
  "SONATA": {
    "features": "standard",
    "interface_language": "Python, C++",
    "model_description_language": "SONATA",
    "name": "SONATA",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "interoperates with",
        "name": "NeuroML"
      }
    ],
    "summary": "<p>The SONATA Data Format is a Scalable Open Data Format for multiscale neuronal network models and simulation output, jointly developed by the Allen Institute for Brain Science (AIBS) and the Blue Brain Project (BBP) of the \u00c9cole polytechnique f\u00e9d\u00e9rale de Lausanne (EPFL).</p>\n<p>The SONATA Data Format provides:</p>\n<ul>\n<li>Facilities for representing nodes (cells) and edges (synapses/junctions) of a network. It uses table-based data structures, hdf5 and csv, to represent nodes, edges and their respective properties. Furthermore indexing procedures are specified to enable fast, parallelizable, and efficient partial lookup of individual nodes and edges. The use of hdf5 provides efficiency both in file size and IO time. , The format includes specific properties and naming conventions, but also allows modelers to extend node and edge model properties as they desire, to ensure models can be used with a variety of simulation frameworks and use cases.</li>\n<li>A JSON-based file format for configuring simulations, including specifying variables to record from, and stimuli to apply.</li>\n<li>A systematic schema for describing simulation output/reports making it easy for users to exchange their simulation output data, and moreover the underlying hdf5 based format permits efficient storage of variables such as spike times, membrane potential, and Ca2+ concentration.</li>\n</ul>",
    "urls": {
      "homepage": "https://github.com/BlueBrain/sonata",
      "source": "https://github.com/BlueBrain/sonata"
    }
  },
  "Steps": {
    "biological_level": "Single-Compartment (Simple) Model, Single-Compartment (Complex) Model, Multi-Compartment Model",
    "features": "frontend, simulator",
    "interface_language": "Python, C, C++",
    "name": "Steps",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, GPU",
    "summary": "<p>STEPS is a package for exact stochastic simulation of reaction-diffusion systems in arbitrarily complex 3D geometries.\nOur core simulation algorithm is an implementation of Gillespie's SSA, extended to deal with diffusion of molecules over the elements of a 3D tetrahedral mesh.</p>\n<p>While it was mainly developed for simulating detailed models of neuronal signaling pathways in dendrites and around synapses, it is a general tool and can be used for studying any biochemical pathway in which spatial gradients and morphology are thought to play a role.</p>\n<p>STEPS also supports accurate and efficient computational of local membrane potentials on tetrahedral meshes, with the addition of voltage-gated channels and currents.\nTight integration between the reaction-diffusion calculations and the tetrahedral mesh potentials allows detailed coupling between molecular activity and local electrical excitability.</p>\n<p>We have implemented STEPS as a set of Python modules, which means STEPS users can use Python scripts to control all aspects of setting up the model, generating a mesh, controlling the simulation and generating and analyzing output.\nThe core computational routines are still implemented as C/C++ extension modules for maximal speed of execution.</p>",
    "urls": {
      "documentation": "https://steps.sourceforge.net/manual/",
      "homepage": "https://steps.sourceforge.net/STEPS/default.php",
      "source": "https://github.com/CNS-OIST/STEPS"
    }
  },
  "TVB": {
    "biological_level": "Population Model",
    "features": "frontend, simulator",
    "interface_language": "Python, GUI",
    "name": "TheVirtualBrain (TVB)",
    "operating_system": "Linux, MacOS, Windows",
    "processing_support": "Single Machine, Cluster, Supercomputer",
    "release": {
      "etag": "\"/lKuVV7zFbP1C6MztBm5EQ\"",
      "package_name": "tvb-library",
      "published": "2025-02-21",
      "source": "pypi",
      "version": "2.9.2"
    },
    "summary": "<p>Simulating the human brain is the holy grail of neuroscience - offering a pioneering tool for understanding how our brain works and how to deal with its disorders like stroke, epilepsy or neurodegenerative diseases like Alzheimer's or Parkinson's.</p>\n<p>While large-scale research initiatives simulate neurons and small brain regions at the cellular level on massively parallel hardware, they are still years away from clinical applications.</p>\n<p>The Virtual Brain (TVB) takes a different approach and reduces complexity on the micro level to attain the macro organization. A TVB model of a patient's brain generates sufficiently accurate EEG, MEG, BOLD and SEEG signals by reducing the complexity millionfold through methods from statistical physics.\nThe key is TVB\u2019s hybrid approach of merging individual anatomy from brain imaging data with state-of-the-art mathematical modeling.</p>",
    "urls": {
      "documentation": "http://docs.thevirtualbrain.org/",
      "download": "https://www.thevirtualbrain.org/tvb/zwei/brainsimulator-software",
      "examples": "https://github.com/the-virtual-brain/tvb-documentation/tree/master/demos",
      "forum": "https://groups.google.com/group/tvb-users/",
      "homepage": "https://www.thevirtualbrain.org/",
      "issue tracker": "http://req.thevirtualbrain.org/",
      "source": "https://github.com/the-virtual-brain/"
    }
  },
  "c302": {
    "features": "API, library",
    "interface_language": "Python",
    "name": "c302",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "exports to",
        "name": "NeuroML"
      }
    ],
    "summary": "<p>c302 is a framework for generating network models in NeuroML 2 based on C. elegans connectivity data.\nIt is primarily intended as a way to generate neuronal networks at multiple levels of detail for the <a href=\"http://www.openworm.org/\">OpenWorm</a> project.</p>",
    "urls": {
      "homepage": "https://v1.opensourcebrain.org/projects/c302",
      "source": "https://github.com/openworm/c302"
    }
  },
  "libNeuroML": {
    "features": "API",
    "interface_language": "Python",
    "model_description_language": "NeuroML/LEMS",
    "name": "libNeuroML",
    "operating_system": "Linux, MacOS, Windows",
    "relations": [
      {
        "description": "is Python API for",
        "name": "NeuroML"
      },
      {
        "description": "is used by",
        "name": "PyNeuroML"
      }
    ],
    "summary": "<p>Python API for working with NeuroML models</p>",
    "urls": {
      "documentation": "https://docs.neuroml.org",
      "download": "https://docs.neuroml.org/Userdocs/Software/libNeuroML.html",
      "homepage": "https://neuroml.org",
      "source": "https://github.com/NeuralEnsemble/libNeuroML",
      "tutorial": "https://docs.neuroml.org/Userdocs/GettingStarted.html"
    }
  },
  "nrn-patch": {
    "features": "frontend",
    "interface_language": "Python",
    "name": "nrn-patch",
    "operating_system": "Windows, MacOS, Linux",
    "relations": [
      {
        "description": "is Python API for",
        "name": "Neuron"
      }
    ],
    "release": {
      "etag": "\"tLxj1FFS+r0wqe8aJgPAHg\"",
      "package_name": "nrn-patch",
      "published": "2025-06-11",
      "source": "pypi",
      "version": "6.0.0"
    },
    "summary": "<p>A Pythonic object-oriented drop-in replacement for the Python interface to NEURON.</p>",
    "urls": {
      "homepage": "https://github.com/dbbs-lab/patch"
    }
  }
}